// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWwW7jNhD9lcG0R8F2dr0XnZqsg9Y9Gal9WuyBkcYWA4lkyZG3QqB/LziSk8pyUzRN",
	"0izgkwlqhvM4896j7zGzlbOGDAdM7zFkBVVKltfeW39DwVkTKG44bx151iSfM5vLbk4h89qxtgZT/GW9",
	"XkFgxXUAiUiQG0eYojZMO/LYJlhRCGp3IltKwuHzQ2pgr80O2zZBT7/X2lOO6Rfszz+Ef32It7d3lHGs",
	"tAnkx9CpUrqUxR+qcmVMubOFmeSWfuq3JpmtMMGt9ZViTPuUEaIEdT486OLDx/mnU4FGVTQM/dUWBhb2",
	"ny8qqUmPYXzNGK7N1o77uS50AB1AQZCicLlawjfNBcTjKTDc2ryBvSp1rmIOKJNDZk3Qgckw+H78ENjX",
	"GdeeJhGtZrnAZ1s5TwWZoPcEN9e/raXAdX/DBPfkQ4fkYjKbzGIbrCOjnMYUP8pWgk5xIWOZ1oG8rHbE",
	"8SfOTGAtc0zxZ+KNBMTmdLAk+MNs1vHRRMhxqZwrdSaZ07sQ6x+IHVeaqZLEHz1tMcUfpo8SmPb8nwpx",
	"2odWK+9V03V62OFLKHVgsFvowLcJfvqXeJ6CMdTgifpLw+SNKiGQ35MHiglCoFBXlfINpnhD7DXtCdQY",
	"rLPhRKs/e1JM0oOOiRT4yubNi92ra++Q5+xrakezvXiFmsMWxn0IdZZRCNu6LBvI5Pp57M/8LYd5pfKD",
	"MBPQRmQJ2ria3yWvOpaAAkPfhFHyvVPx9D7+LPO2M6WSmMY0W8h+TzOnvKqIxQG+jI2MYLmIzOWCpBaw",
	"hf7c6H6Yio/gwWexK4/HBEv+0qBj0/06It98bKljtnQoerbM325EgsRYhq2tTf4uGdINGFQ3sdsGlouI",
	"8yl7v2pkas9gg+9t7hX5MHt1M7rsrvP4D+ZMqb99zIakcoqzYkyrVdx+vsU45VmrKPPa5eqlzeb/fFhn",
	"b/OwHjfwvb2qZ30N9bU6mtdYZ/UJ895I7PNldhbXf//XetbX96CvzSlVtW37ZwAAAP//QBNLCIkRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
